<?php

namespace TheRealGambo\Ramlfications\Test;

use TheRealGambo\Ramlfications\Nodes\RootNode;
use TheRealGambo\Ramlfications\Parameters\Content;
use TheRealGambo\Ramlfications\Parameters\Header;
use TheRealGambo\Ramlfications\Parser;

class HeaderParameterTest extends \PHPUnit_Framework_TestCase
{
    /** @var RootNode $raml */
    private $raml;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->raml = $this->loadRaml('api.raml');
    }

    private function loadRaml(string $file): RootNode
    {
        $parser = new Parser();
        $data = $parser->parseFile($file, __DIR__ . '/raml/1.0/headers/');
        $raml = $parser->parseRaml($data);
        return $raml;
    }

    public function testHeaderExample1()
    {
        $resource = $this->raml->getResourceByPath('/');
        /** @var Header $header */
        $header = $resource->getMethod('get')->getHeader('example1');

        $this->assertInstanceOf(Header::class, $header);
        $this->assertEquals('string', $header->getType());
        $this->assertEquals('simple description', $header->getDescription());
        $this->assertInstanceOf(Content::class, $header->getDescription());
        $this->assertEquals('Example 1', $header->getDisplayName());
        $this->assertEquals(4, $header->getMinLength());
        $this->assertEquals(10, $header->getMaxLength());
        $this->assertTrue($header->getRequired());
        $this->assertEquals('toto', $header->getDefault());
    }

    public function testHeaderExample2()
    {
        $resource = $this->raml->getResourceByPath('/');
        /** @var Header $header */
        $header = $resource->getMethod('get')->getHeader('example2');

        $this->assertInstanceOf(Header::class, $header);
        $this->assertEquals('string', $header->getType());
        $this->assertEquals('enum options description', $header->getDescription());
        $this->assertInstanceOf(Content::class, $header->getDescription());
        $this->assertEquals('Example 2', $header->getDisplayName());
        $this->assertArraySubset(['cat', 'dog', 'cow'], $header->getEnum());
        $this->assertFalse($header->getRequired());
        $this->assertEquals('cow', $header->getDefault());
    }

    public function testHeaderExample3()
    {
        $resource = $this->raml->getResourceByPath('/');
        /** @var Header $header */
        $header = $resource->getMethod('get')->getHeader('example3');

        $this->assertInstanceOf(Header::class, $header);
        $this->assertEquals('number', $header->getType());
        $this->assertEquals('numbers description', $header->getDescription());
        $this->assertInstanceOf(Content::class, $header->getDescription());
        $this->assertEquals('Example 3', $header->getDisplayName());
        $this->assertEquals(20, $header->getMinimum());
        $this->assertEquals(50, $header->getMaximum());
        $this->assertTrue($header->getRequired());
        $this->assertEquals('', $header->getDefault());
    }
}