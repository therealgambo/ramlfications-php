<?php

namespace TheRealGambo\Ramlfications\Test;


use TheRealGambo\Ramlfications\Nodes\RootNode;
use TheRealGambo\Ramlfications\Parameters\Content;
use TheRealGambo\Ramlfications\Parameters\Documentation;
use TheRealGambo\Ramlfications\Parser;

class RootNodeTest extends \PHPUnit_Framework_TestCase
{

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    private function loadRaml(string $file): RootNode
    {
        $parser = new Parser();
        $data = $parser->parseFile($file, __DIR__ . '/raml/1.0/rootnode/');
        $raml = $parser->parseRaml($data);
        return $raml;
    }

    /**
     * @expectedException \TheRealGambo\Ramlfications\Exceptions\InvalidRootNodeException
     */
    public function testTitleNodeMissing()
    {
        $root = new RootNode([]);
    }

    public function testGetRaw()
    {
        $root = new RootNode(['title' => 'toto']);
        $this->assertArraySubset(['title' => 'toto'], $root->getRaw());
    }

    public function testTitleNode()
    {
        $raml = $this->loadRaml('basic.raml');
        $this->assertEquals('my basic title', $raml->getTitle());
    }

    public function testDescriptionNode()
    {
        $raml = $this->loadRaml('basic.raml');
        $this->assertEquals('my basic api description', $raml->getDescription());
        $this->assertEquals('my basic api description', $raml->getDescription()->raw());
        $this->assertInstanceOf(Content::class, $raml->getDescription());
    }

    public function testMediaTypeNodeString()
    {
        $raml = $this->loadRaml('basic.raml');
        $this->assertArraySubset(['application/json'], $raml->getMediaType());
    }

    public function testMediaTypeNodeArray()
    {
        $raml = $this->loadRaml('mediatypeMulti.raml');
        $this->assertArraySubset(['application/json', 'application/xml'], $raml->getMediaType());
    }

    public function testBaseUriNode()
    {
        $raml = $this->loadRaml('baseUri.raml');
        $this->assertEquals('https://api.example.com/v22', $raml->getBaseUri());
        $this->assertArraySubset(['HTTPS'], $raml->getProtocols());
    }

    /**
     * @expectedException \TheRealGambo\Ramlfications\Exceptions\InvalidRootNodeException
     */
    public function testBaseUriNodeMissingVersionNode()
    {
        try {
            $raml = $this->loadRaml('baseUriMissingVersion.raml');
        } catch (\Exception $e) {
            $this->assertEquals(
                'baseUri includes \'{version}\' parameter but no version has been set.',
                $e->getMessage()
            );

            throw $e;
        }
    }

    /**
     * @expectedException \TheRealGambo\Ramlfications\Exceptions\InvalidRootNodeException
     */
    public function testBaseUriNodeMissingUriParamNode()
    {
        try {
            $raml = $this->loadRaml('baseUriMissingParam.raml');
        } catch (\Exception $e) {
            $this->assertEquals(
                'baseUri includes parameters \'{missing}\' but they have not been defined in baseUriParameters.',
                $e->getMessage()
            );
            throw $e;
        }
    }

    public function testDocumentNode()
    {
        $raml = $this->loadRaml('doc.raml');
        $this->assertCount(2, $raml->getDocumentation());

        $doc = $raml->getDocumentation();

        /** @var Documentation $doc1 */
        $doc1 = $doc[0];
        $this->assertEquals('my first example', $doc1->getTitle());
        $this->assertEquals('single line content', $doc1->getContent());

        /** @var Documentation $doc2 */
        $doc2 = $doc[1];
        $this->assertEquals('second example', $doc2->getTitle());
        $this->assertEquals('multi
line
content', $doc2->getContent());
    }

    public function testProtocolNodeInheritedFromBaseUri()
    {
        $raml = $this->loadRaml('protocols.raml');
        $this->assertArraySubset(['HTTP'], $raml->getProtocols());
    }

    public function testProtocolNode()
    {
        $raml = $this->loadRaml('protocols1.raml');
        $this->assertArraySubset(['HTTP', 'HTTPS'], $raml->getProtocols());
    }
}