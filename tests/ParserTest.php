<?php

namespace TheRealGambo\Ramlfications\Test;

use Symfony\Component\Yaml\Yaml;
use TheRealGambo\Ramlfications\Exceptions\InvalidDocumentationNodeException;
use TheRealGambo\Ramlfications\Exceptions\InvalidResponseNodeException;
use TheRealGambo\Ramlfications\Exceptions\InvalidRootNodeException;
use TheRealGambo\Ramlfications\Nodes\ResourceNode;
use TheRealGambo\Ramlfications\Nodes\RootNode;
use TheRealGambo\Ramlfications\Parameters\Content;
use TheRealGambo\Ramlfications\Parameters\Documentation;
use TheRealGambo\Ramlfications\Parameters\UriParameter;
use TheRealGambo\Ramlfications\Parser;

class ParserTest extends \PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    private function loadRaml(string $file): RootNode
    {
        $parser = new Parser();
        $data = $parser->parseFile($file, __DIR__ . '/raml/1.0/parser/');
        $raml = $parser->parseRaml($data);
        return $raml;
    }

    /**
     * @expectedException \TheRealGambo\Ramlfications\Exceptions\LoadRamlException
     */
    public function testParserCannotFindFile()
    {
        try {
            $raml = $this->loadRaml('missingfile.raml');
        } catch (\Exception $e) {
            $this->assertEquals(
                'The specified file cannot be read: missingfile.raml',
                $e->getMessage()
            );
            throw $e;
        }
    }

    /**
     * @expectedException \TheRealGambo\Ramlfications\Exceptions\RamlHeaderException
     */
    public function testParserInvalidHeader()
    {
        try {
            $raml = $this->loadRaml('apiempty.raml');
        } catch (\Exception $e) {
            $this->assertEquals(
                'Invalid RAML header: ',
                $e->getMessage()
            );
            throw $e;
        }
    }

    /**
     * @expectedException \TheRealGambo\Ramlfications\Exceptions\LoadRamlException
     */
    public function testParserEmptyFile()
    {
        try {
            $raml = $this->loadRaml('apiemptywithheader.raml');
        } catch (\Exception $e) {
            $this->assertEquals(
                'The specified RAML file \'apiemptywithheader.raml\' is empty.',
                $e->getMessage()
            );
            throw $e;
        }
    }

//    public function testParserRootNode()
//    {
//        $this->assertEquals('Example API', $this->valid->getTitle());
//        $this->assertEquals('Example API description!', $this->valid->getDescription());
//        $this->assertEquals('v3', $this->valid->getVersion());
//        $this->assertEquals('https://api.example.com/v3', $this->valid->getBaseUri());
//        $this->assertContains(RootNode::HTTPS, $this->valid->getProtocols());
//        $this->assertContains('application/json', $this->valid->getMediaType());
//        $this->assertCount(1, $this->valid->getMediaType());
//    }
//
//    /**
//     * @expectedException \TheRealGambo\Ramlfications\Exceptions\InvalidRootNodeException
//     */
//    public function testRootNodeTitleMissingException()
//    {
//        try {
//            $parser = new Parser();
//            $raml = $parser->parseRaml([]);
//            $raml->validate();
//        } catch (InvalidRootNodeException $exception) {
//            $this->assertEquals('The required root node parameter \'title\' has not been set.', $exception->getMessage());
//            throw $exception;
//        }
//    }
//
//    /**
//     * @expectedException \TheRealGambo\Ramlfications\Exceptions\InvalidRootNodeException
//     */
//    public function testRootNodeBaseUriVersionMissing()
//    {
//        try {
//            $parser = new Parser();
//            $raml = $parser->parseRaml(['title' => 'toto', 'baseUri' => 'https://api.example.com/{version}']);
//            $raml->validate();
//        } catch (InvalidRootNodeException $exception) {
//            $this->assertEquals('baseUri includes \'{version}\' parameter but no version has been set.', $exception->getMessage());
//            throw $exception;
//        }
//    }
//
//    /**
//     * @expectedException \TheRealGambo\Ramlfications\Exceptions\InvalidDocumentationNodeException
//     */
//    public function testRootNodeDocumentationMissingContent()
//    {
//        try {
//            $parser = new Parser();
//            $raml = $parser->parseRaml(['title' => 'toto', 'documentation' => [0 => ['title' => 'toto']]]);
//            $raml->validate();
//        } catch (InvalidDocumentationNodeException $exception) {
//            $this->assertEquals('API documentation is missing a required \'content\' parameter.', $exception->getMessage());
//            throw $exception;
//        }
//    }
//
//    /**
//     * @expectedException \TheRealGambo\Ramlfications\Exceptions\InvalidDocumentationNodeException
//     */
//    public function testRootNodeDocumentationMissingTitle()
//    {
//        try {
//            $parser = new Parser();
//            $raml = $parser->parseRaml(['title' => 'toto', 'documentation' => [0 => ['content' => 'toto']]]);
//            $raml->validate();
//        } catch (InvalidDocumentationNodeException $exception) {
//            $this->assertEquals('API documentation is missing a required \'title\' parameter.', $exception->getMessage());
//            throw $exception;
//        }
//    }
//
//    public function testParserRootNodeBaseUriParameters()
//    {
//        $this->assertCount(2, $this->valid->getBaseUriParameters());
//
//        foreach ($this->valid->getBaseUriParameters() as $baseUriParameter) {
//            /** @var UriParameter $baseUriParameter */
//            $this->assertInstanceOf(UriParameter::class, $baseUriParameter);
//        }
//
//        $param = $this->valid->getBaseUriParameterByKey('testVar');
//        $this->assertInstanceOf(UriParameter::class, $param);
//        $this->assertEquals('string', $param->getType());
//        $this->assertEquals('toto', $param->getDefault());
//
//        $param = $this->valid->getBaseUriParameterByKey('testVar1');
//        $this->assertInstanceOf(UriParameter::class, $param);
//        $this->assertRegExp('/'.$param->getPattern().'/', $param->getDefault());
//
//        $param = $this->valid->getBaseUriParameterByKey('invalidKey');
//        $this->assertNull($param);
//    }
//
//    public function testParserRootNodeDocumentation()
//    {
//        $this->assertCount(2, $this->valid->getDocumentation());
//
//        foreach ($this->valid->getDocumentation() as $documentation) {
//            /** @var Documentation $documentation */
//            $this->assertInstanceOf(Documentation::class, $documentation);
//            $this->assertInstanceOf(Content::class, $documentation->getTitle());
//            $this->assertInstanceOf(Content::class, $documentation->getContent());
//        }
//    }
//
//    public function testParserRootNodeResources()
//    {
//        $this->assertCount(5, $this->valid->getResources());
//    }
//
//    public function testRootNodeProtocols()
//    {
//        $parser = new Parser();
//        $raml = $parser->parseRaml(['title' => 'toto', 'protocols' => ['HTTP', 'HTTPS']]);
//        $raml->validate();
//
//        $this->assertArraySubset(['HTTP', 'HTTPS'], $raml->getProtocols());
//    }
//
//    public function testRootNodeBaseUriSetProtocolHttp()
//    {
//        $parser = new Parser();
//        $raml = $parser->parseRaml(['title' => 'toto', 'baseUri' => 'http://api.example.com']);
//        $raml->validate();
//
//        $this->assertArraySubset(['HTTP'], $raml->getProtocols());
//    }
//
//    public function testRootNodeBaseUriSetProtocolHttps()
//    {
//        $parser = new Parser();
//        $raml = $parser->parseRaml(['title' => 'toto', 'baseUri' => 'https://api.example.com']);
//        $raml->validate();
//
//        $this->assertArraySubset(['HTTPS'], $raml->getProtocols());
//    }
}