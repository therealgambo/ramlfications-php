<?php

namespace TheRealGambo\Ramlfications\Test;

use Symfony\Component\Yaml\Yaml;
use TheRealGambo\Ramlfications\Nodes\ResourceNode;
use TheRealGambo\Ramlfications\Nodes\RootNode;
use TheRealGambo\Ramlfications\Parser;

class ResourceNodeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var array $raml
     */
    private $raml;

    /**
     * @var RootNode $valid
     */
    private $valid;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
//
//        $this->raml = Yaml::parse(file_get_contents(__DIR__ . '/raml/1.0/complete-rootnode-valid.raml'));
//        $parser = new Parser();
//        $this->valid = $parser->parseRaml($this->raml);
//        $this->valid->validate();
    }

//    public function testResourceNodeInheritsProtocolsFromRootNode()
//    {
//        /** @var ResourceNode $resource */
//        $resource = $this->valid->getResourceByPathAndMethod('/search/code', 'get');
//        $this->assertInstanceOf(ResourceNode::class, $resource);
//        $this->assertCount(1, $resource->getProtocols());
//        $this->assertArraySubset(['HTTPS'], $resource->getProtocols());
//    }
//
//    public function testResourceNodeProtocolOverridesRootNode()
//    {
//        /** @var ResourceNode $resource */
//        $resource = $this->valid->getResourceByPathAndMethod('/search/repositories', 'get');
//        $this->assertInstanceOf(ResourceNode::class, $resource);
//        $this->assertCount(2, $resource->getProtocols());
//        $this->assertArraySubset(['HTTP', 'HTTPS'], $resource->getProtocols());
//    }
//
//    public function testGetResourceNodeName()
//    {
//        /** @var ResourceNode $resource */
//        $resource = $this->valid->getResourceByPathAndMethod('/search/repositories', 'get');
//        $this->assertEquals('/search/repositories', $resource->getName());
//    }
//
//    public function testGetResourceNodeAbsoluteUriAsString()
//    {
//        /** @var ResourceNode $resource */
//        $resource = $this->valid->getResourceByPathAndMethod('/search/code', 'get');
//        $this->assertCount(1, $resource->getAbsoluteUri());
//        $this->assertEquals('https://api.example.com/v3/search/code', $resource->getAbsoluteUri()[0]);
//    }
//
//    public function testGetResourceNodeAbsoluteUriAsArray()
//    {
//        /** @var ResourceNode $resource */
//        $resource = $this->valid->getResourceByPathAndMethod('/search/repositories', 'get');
//        $this->assertCount(2, $resource->getAbsoluteUri());
//        $this->assertEquals('http://api.example.com/v3/search/repositories', $resource->getAbsoluteUri()[0]);
//        $this->assertEquals('https://api.example.com/v3/search/repositories', $resource->getAbsoluteUri()[1]);
//    }
//
//    public function testGetMediaTypeFromResourceNode()
//    {
//        /** @var ResourceNode $resource */
//        $resource = $this->valid->getResourceByPathAndMethod('/search/repositories', 'get');
//        $this->assertEquals('application/json', $resource->getMediaType());
//    }
//
//    public function testResourceNodeMethodSecuredByNodeOverridesParents()
//    {
//        /** @var ResourceNode $resource */
//        $resource = $this->valid->getResourceByPathAndMethod('/search/{toto}', 'post');
//        $this->assertArraySubset(['null', 'jwt'], $resource->getSecuredBy(), false);
//    }
}
