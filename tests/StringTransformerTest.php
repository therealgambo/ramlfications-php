<?php

namespace TheRealGambo\Ramlfications\Test;

use TheRealGambo\Ramlfications\Utilities\StringTransformer;

class StringTransformerTest extends \PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testLowerCase()
    {
        $this->assertEquals(
            'userid',
            StringTransformer::convertString('userId', StringTransformer::LOWER_CASE)
        );
    }

    public function testLowerCamelCase()
    {
        $this->assertEquals(
            'userId',
            StringTransformer::convertString('UserId', StringTransformer::LOWER_CAMEL_CASE)
        );
    }

    public function testLowerHyphenCase()
    {
        $this->assertEquals(
            'user-id',
            StringTransformer::convertString('userId', StringTransformer::LOWER_HYPHEN_CASE)
        );
    }

    public function testLowerUnderscoreCase()
    {
        $this->assertEquals(
            'user_id',
            StringTransformer::convertString('userId', StringTransformer::LOWER_UNDERSCORE_CASE)
        );
    }

    public function testUpperCase()
    {
        $this->assertEquals(
            'USERID',
            StringTransformer::convertString('userId', StringTransformer::UPPER_CASE)
        );
    }

    public function testUpperCamelCase()
    {
        $this->assertEquals(
            'UserId',
            StringTransformer::convertString('userId', StringTransformer::UPPER_CAMEL_CASE)
        );
    }

    public function testUpperHyphenCase()
    {
        $this->assertEquals(
            'USER-ID',
            StringTransformer::convertString('userId', StringTransformer::UPPER_HYPHEN_CASE)
        );
    }

    public function testUpperUnderscoreCase()
    {
        $this->assertEquals(
            'USER_ID',
            StringTransformer::convertString('userId', StringTransformer::UPPER_UNDERSCORE_CASE)
        );
    }

    /**
     * @expectedException \Exception
     */
    public function testStringTransformerInvalidConversion()
    {
        try {
            StringTransformer::convertString('invalid', 99);
        } catch(\Exception $e) {
            $this->assertEquals(
                'Invalid transformation parameter "99" given for ' .
                'TheRealGambo\Ramlfications\Utilities\StringTransformer::convertString',
                $e->getMessage()
            );
            throw $e;
        }
    }

    public function testStringPluralize()
    {
        $this->assertEquals(
            'users',
            StringTransformer::convertString('user', StringTransformer::PLURALIZE)
        );
    }

    public function testStringSingularize()
    {
        $this->assertEquals(
            'user',
            StringTransformer::convertString('users', StringTransformer::SINGULARIZE)
        );
    }
}
